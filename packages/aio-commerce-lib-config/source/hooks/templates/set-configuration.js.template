/*
Copyright 2025 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// This file is auto-generated by the pre-app-build hook
// Do not modify this file directly

const { init, createErrorResponse, createSuccessResponse } = require('@adobe/aio-commerce-lib-config');

/**
 * Get the configuration.
 * @param {object} params - The input parameters.
 * @returns {Promise<object>} The response object containing the configuration schema.
 */
async function main(params) {
  try {
    const lib = init();
    let body = undefined;
    if (params && typeof params === 'object' && Object.keys(params).length === 0) {
      body = {};
    }

    const id = params.id
    const code = params.code
    const level = params.level;
    if (!id && !(code && level)) {
      return createErrorResponse(400, 'INVALID_PARAMS', 'Either id or both code and level query params are required');
    }

    const candidateConfig = params.config ?? (body && body.config);
    if (!candidateConfig || !Array.isArray(candidateConfig)) {
      return createErrorResponse(400, 'INVALID_BODY', 'request must include a config array in params.config or body.config');
    }

    const payload = { config: candidateConfig };

    const libAny = lib;
    const result = id
      ? await libAny.setConfiguration(payload, id)
      : await libAny.setConfiguration(payload, code, level);

    return createSuccessResponse(200, result, {
      'Cache-Control': 'no-store'
    });
  } catch (error) {
    return createErrorResponse(500, "INTERNAL_ERROR",
      "An internal server error occurred.",
      error instanceof Error ? error.message : 'Unknown error'
    );
  }
}

exports.main = main;
